#!/usr/bin/env ruby

require 'bundler/setup'
require 'porkbun'
require 'thor'

class CLI < Thor
  desc 'import <file>', 'Import BIND zone file'
  def import(file)
    record_regex = /^(?<hostname>[^\s]+)\.\s+(?<ttl>\d+)\s+IN\s+(?<type>[^\s]+)\s*(?<priority>\d+)?\s+(?<content>.+)$/
    IO.readlines(file).each do |line|
      match_data = line.match(record_regex)
      next unless match_data

      domain = match_data[:hostname].split('.')[-2..].join('.').chomp '.'
      name = match_data[:hostname].split('.')[0..-3].join('.')

      options = {
        domain:,
        name:,
        ttl: match_data[:ttl],
        type: match_data[:type],
        prio: match_data[:priority],
        content: match_data[:content].chomp('.').gsub(/^"|"$/, '')
      }.compact

      record = Porkbun::DNS.create options
      pp record
    end
  end

  desc 'list', 'List all domains'
  def list
    Porkbun::Domain.list_all[:domains].each do |domain|
      puts domain[:domain]
    end
  end

  desc 'delete_all <domain>', 'deletes all records for a domain. this is destructive. use with caution'
  def delete_all(domain, id = '')
    records = get_all(domain, id)
    records.each do |record|
      next if record.type == 'NS'

      puts "DELETE #{record}"
      record.delete
    end
  end

  desc 'retrieve <domain> [<id>]', 'List all records for a domain'
  def retrieve(domain, id = '')
    records = get_all(domain, id)
    puts records
  end

  def self.exit_on_failure?
    exit 1
  end

  private

  def get_all(domain, id = '')
    records = Porkbun::DNS.retrieve(domain, id)
    if records.instance_of?(Porkbun::Error)
      puts records.message
      exit 1
    end
    records
  end
end

CLI.start(ARGV)
